name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Backend Build and Test
  backend_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]  # Matrix for different Node.js versions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules for backend
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-backend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-backend-

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Run backend tests
        run: |
          cd backend
          npm run test

  # Frontend Build and Test
  frontend_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]  # Matrix for different Node.js versions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules for frontend
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-frontend-

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test

  # Deploy Backend to Railway
  deploy_backend:
    runs-on: ubuntu-latest
    needs: [backend_build]  # Ensure this job runs after the backend build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Railway CLI
        run: npm install -g @railway/cli  # Install the Railway CLI

      - name: Login to Railway
        run: |
          railway login --apiToken $RAILWAY_API_TOKEN  # Non-interactive login with API token
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}  # Use the API token

      - name: Link Railway Project
        run: |
          cd backend
          railway link --project $RAILWAY_PROJECT_ID --team $RAILWAY_TEAM --environment production --service cyber_school_vj
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}  # Ensure the token is available

      - name: Deploy Backend to Railway
        run: |
          cd backend
          railway up --project $RAILWAY_PROJECT_ID --team $RAILWAY_TEAM --environment production --service cyber_school_vj
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}  # Ensure the token is available

  # Deploy Frontend (optional: if frontend deployment is needed separately)
  deploy_frontend:
    runs-on: ubuntu-latest
    needs: frontend_build  # Ensure this job runs after the frontend build job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          cd frontend
          npm install  # Install all dependencies

      - name: Build and Deploy Frontend
        run: |
          cd frontend
          npm run build  # Build the frontend application
          railway up --project $RAILWAY_PROJECT_ID --team $RAILWAY_TEAM --environment production --service frontend_service_name  # Deploy to Railway (adjust service name accordingly)
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
